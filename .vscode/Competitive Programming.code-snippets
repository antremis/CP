{
	// Place your C++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Competitive I/O" :{
		"scope" : "cpp",
		"prefix" : "io",
		"body" : [
			"#ifndef ONLINE_JUDGE",
			"freopen(\"input.txt\", \"r\", stdin);",
			"freopen(\"output.txt\", \"w\", stdout);",
			"#endif",
			"",
			""
		],
		"description" : "Sets up an Input mode from text files"
	},
	
	"C++ Header" : {
		"scope" : "cpp",
		"prefix" : "hh",
		"body" : [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main(){",
			"\t$0",
			"}",
		],
		"description" : " Basic Header Files For C++"
	},

	"Competitive Coding C++" : {
		"scope" : "cpp",
		"prefix" : ".cp",
		"body" : [
			"#include <bits/stdc++.h>",
			"#pragma GCC optimise(\"O2\")",
			"using namespace std;",
			"#define int long long",
			"#define lf unsigned long float",
			"#define sl(x) scanf(\"%lld\", &l)",
			"#define vi vector<int>",
			"#define vivi vector< vector<int> >",
			"#define vs vector<string>",
			"#define vd vector<double>",
			"#define p(type1, type2) pair<type1, type2>",
			"#define umap(type1, type2) unordered_map<type1, type2>",
			"#define uset(type1) unordered_set<type1>",
			"#define ct (double)(clock() - sTime)/CLOCKS_PER_SEC",
			"#define deb1(x) cout << #x << \" : \" << x << endl;",
			"#define deb2(x, y) cout << #x << \" : \" << x << endl << #y << \" : \" << y << endl;",
			"#define deb3(x, y, z) cout << #x << \" : \" << x << endl << #y << \" : \" << y << endl << #z << " : " << z << endl;",
			"#define endl '\\n'",
			"#define el '\\n'",
			"#define FF(i, a, n) for(i = a; a < n ? i < n : i >= n; a < n ? i++ : i--)",
			"#define ff(i, a, n) for(int i = a; a < n ? i < n : i >= n; a < n ? i++ : i--)",
			"#define F(i, n) for(i = 0; i < n; i++)",
			"#define f(i, n) for(int i = 0; i < n; i++)",
			"#define fa(a, x) for(const auto &a : x)",
			"#define all(a) a.begin(), a.end()",
			"#define mxar(arr, size) *std::max_element(arr, arr+size)",
			"#define mnar(arr, size) *std::min_element(arr, arr+size)",
			"#define vmx(arr) *std::max_element(&arr[0], &arr[arr.size()])",
			"#define vmn(arr) *std::min_element(&arr[0], &arr[arr.size()])",
			"#define print(x) for(const auto &e: (x)) { cout << e << \" \"; } cout << endl",
			"#define VTS(v) ({ \\",
            "    stringstream ss; \\",
            "    for(int i : v){ \\",
            "        ss << i << \" \"; \\",
            "    } \\",
            "    string s = ss.str(); \\",
            "    s; \\",
            "})",
			"#define STV(s) ({ \\",
			"\t stringstream ss(s); \\",
			"\t vi v; \\",
			"\t int temp; \\",
			"\t while(ss >> temp){ \\",
			"\t\t v.push_back(temp); \\",
			"\t } \\",
			"\t v; \\",
			" })",
			"#define MAX(...) ({ \\",
			"\tint nos[] = {__VA_ARGS__}; \\",
			"\tint n = sizeof(nos)/sizeof(nos[0]); \\",
			"\t*std::max_element(nos, nos+n); \\",
			" })",
			"#define MIN(...) ({ \\",
			"\tint nos[] = {__VA_ARGS__}; \\",
			"\tint n = sizeof(nos)/sizeof(nos[0]); \\",
			"\t*std::min_element(nos, nos+n); \\",
			" })",
			"",
			"signed main(){",
			"\t#ifndef ONLINE_JUDGE",
			"\tfreopen(\"input.txt\", \"r\", stdin);",
			"\tfreopen(\"output.txt\", \"w\", stdout);",
			"\t#endif",
			"",
			"\tios_base::sync_with_stdio(false);",
			"\tcin.tie(NULL);",
			"\tcout.tie(NULL);",
			"\tclock_t sTime = clock();",
			"",
			"\tint t; cin >> t;",
			"\twhile(t--){",
			"\t\t$0",
			"\t}",
			"}",
		],
		"description": "Competitive Coding Starter Block"
	}
}